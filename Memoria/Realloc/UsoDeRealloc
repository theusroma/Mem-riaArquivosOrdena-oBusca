#include <stdio.h>
#include <stdlib.h>

int main() {
	
    int n, i, novotamanho;
    char resposta[3];
    
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    // Alocando memória para o vetor
    int *vetor = (int *)malloc(n * sizeof(int));
    if (vetor == NULL) {
        printf("Erro ao alocar memória.\n");
        return 1;
    }

    // Preenchendo e exibindo o vetor
    for (i = 0; i < n; i++) {
        printf("insira o valor para o indice [%d]: ", i);
        scanf("%d", &vetor[i]);
    }

    printf("Vetor: ");
    for (i = 0; i < n; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");
    
    printf("Voce deseja adicionar mais elementos ao vetor? [S / N]");
    scanf("%s", resposta);
    if(resposta[0] == 's' || resposta[0] == 'S'){
    	printf("Quantos elementos deseja adicionar?");
    	scanf("%d", &novotamanho);
    	
    	vetor = (int *)realloc(vetor, (n + novotamanho) * sizeof(int));
        if (vetor == NULL) {
            printf("Erro ao redimensionar o vetor.\n");
            return 1;
        }
        
         // Preenche os novos elementos
        for (i = n; i < n + novotamanho; i++) {
            printf("Insira o valor para o indice [%d]: ", i);
            scanf("%d", &vetor[i]);
        }

        // Atualiza o tamanho do vetor
        n += novotamanho;
    

    // Exibe o vetor atualizado
    printf("Vetor final: ");
    for (i = 0; i < n; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");
	}
        
	else{
		printf("entaum ta baumm");
	}

    // Liberando a memória
    free(vetor);

    return 0;
}
